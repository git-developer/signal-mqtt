#!/bin/sh
#
# A gateway between Signal messages and MQTT
#
set -eu

signal_data="${XDG_DATA_HOME:-${HOME}/.local/share}/signal-cli/data"
MQTT_TOPIC_PREFIX="${MQTT_TOPIC_PREFIX:-signal}"
MQTT_PUBLISH_TOPIC="${MQTT_PUBLISH_TOPIC:-${MQTT_TOPIC_PREFIX}/in}"
MQTT_SUBSCRIBE_TOPIC="${MQTT_SUBSCRIBE_TOPIC:-${MQTT_TOPIC_PREFIX}/out}"
MQTT_LOG_TOPIC="${MQTT_LOG_TOPIC:-${MQTT_TOPIC_PREFIX}/log}"
SIGNAL_ACCOUNT="${SIGNAL_ACCOUNT:-$(jq -r '.accounts[0].number' <"${signal_data}/accounts.json")}"

#######################################
# Publish a message via MQTT.
# Globals:
#   MQTT_PUBLISH_OPTIONS
# Arguments:
#   1: MQTT topic
#   2: Message
#######################################
_publish() {
  local topic="${1}" message="${2}"

    # xargs has a default limit of ~30000 bytes for the command line, which may be too small.
    # Thus, the limit is set slightly above the actual size.
    # `LC_ALL` is set to get the string length in bytes, not characters.
    xargs_limit=$(LC_ALL=C expr 50 + "${#topic}" + "${#message}" + "${#MQTT_PUBLISH_OPTIONS}")

    printf '%s' "${MQTT_PUBLISH_OPTIONS}" | xargs -s "${xargs_limit}" mosquitto_pub -t "${topic}" -m "${message}"
}

#######################################
# Build a JSON-RPC object.
# Arguments:
#   1: Topic in the form `method[/key/value]...`
#   2: Message
# Outputs:
#   JSON-RPC object
#######################################
to_jsonrpc() {
  local topic="${1}" message="${2}"
  printf '%s\n' "${topic}" | jq --raw-input --compact-output --arg message "${message}" '
    include "url_decode";
    split("/") + ["message", $message] | {
      jsonrpc: "2.0",
      method: .[0],
      params: [. as $v | range(1; length; 2) | {($v[.]): $v[(.+1)] | url_decode}] | add
    }
  '
}

#######################################
# Encode a text to percent-encoding.
# Arguments:
#   1: Text
# Outputs:
#   Text in percent-encoding
#######################################
percent_encode() {
  printf '%s' "${1}" | jq -sRr @uri
}

#######################################
# Write one or more arguments to the log
# Arguments:
#  Log messages
#######################################
log() {
  printf '%s\n' >&2 "${@}"
  if [ "${MQTT_LOG:-false}" = 'true' ]; then
    _publish "${MQTT_LOG_TOPIC}" "${*}"
  fi
}

#######################################
# Read a JSON RPC object from stdin,
# build a message and publish it via MQTT.
# Inputs:
#  A JSON RPC object
#######################################
mqtt_publish() {
  while read -r json_response; do
    if [ "${MQTT_PUBLISH_JSON_RESPONSE:-false}" = 'true' ]; then
      _publish "${MQTT_PUBLISH_TOPIC}" "${json_response}"
    fi

    if [ "${MQTT_PUBLISH_PER_SOURCE:-true}" = 'true' ]; then
      variables='source_number timestamp group_id quote_timestamp reaction_emoji reaction_timestamp message'
      printf '%s' "${json_response}" \
      | jq -r '.params.envelope
               | [.sourceNumber, (.dataMessage | .timestamp, .groupInfo.groupId, .quote.id, (.reaction | .emoji, .targetSentTimestamp), .message)]
               | map_values(. // "\u0000")
               | @tsv' \
      | while IFS=$(printf '\t') read -r $(printf "${variables}"); do
        for var in $(printf "${variables}"); do eval "${var}=\$(printf \"\${$var}\")"; done
        if [ "${reaction_emoji}" ]; then
          message="${reaction_emoji}"
        fi

        if [ "${message}" ]; then
          topic="${MQTT_PUBLISH_TOPIC}/$(percent_encode "${source_number}")"

          if [ "${MQTT_PUBLISH_PER_SOURCE_AS_JSON:-false}" = 'true' ]; then
            _publish "${topic}" "${json_response}"
          fi

          if [ "${MQTT_PUBLISH_PER_SOURCE_AS_TEXT:-true}" = 'true' ]; then
            if [ "${MQTT_PUBLISH_PER_SOURCE_TIMESTAMP:-true}" = 'true' ]; then
              topic="${topic}/timestamp/${timestamp}"
            fi
            if [ "${group_id}" ]; then
              topic="${topic}/group/$(percent_encode "${group_id}")"
            fi
            if [ "${quote_timestamp}" ]; then
              topic="${topic}/quote/${quote_timestamp}"
            fi
            if [ "${reaction_timestamp}" ]; then
              topic="${topic}/reaction/${reaction_timestamp}"
            fi
            _publish "${topic}" "${message}"
          fi
        fi
      done
    fi
  done
}

#######################################
# Subscribe to a MQTT topic and convert each incoming message
# to a JSON RPC object.
# Outputs:
#   One JSON RPC object per incoming message
#######################################
mqtt_subscribe() {
  printf '%s' "${MQTT_SUBSCRIBE_OPTIONS}" \
  | xargs mosquitto_sub -t "${MQTT_SUBSCRIBE_TOPIC}/#" -v \
  | while read -r topic payload; do
    case "${topic}" in
      "${MQTT_SUBSCRIBE_TOPIC}")   printf '%s\n' "${payload}" ;;
      "${MQTT_SUBSCRIBE_TOPIC}"/*) to_jsonrpc "${topic##${MQTT_SUBSCRIBE_TOPIC}/}" "${payload}" ;;
      *) log "Ignoring message on unsupported topic ${topic}" ;;
    esac
  done
}


#######################################
# Start the application.
#######################################
main() {
  log "Starting ${0}"
  mqtt_subscribe | signal-cli --account "${SIGNAL_ACCOUNT}" ${DEBUG:+-v}${TRACE:+-v -v} jsonRpc | mqtt_publish
}

main "${@}"
