#!/bin/sh
#
# A gateway between Signal messages and MQTT
#
set -eu

signal_data="${XDG_DATA_HOME:-${HOME}/.local/share}/signal-cli/data"
MQTT_TOPIC_PREFIX="${MQTT_TOPIC_PREFIX:-signal}"
MQTT_PUBLISH_TOPIC="${MQTT_PUBLISH_TOPIC:-${MQTT_TOPIC_PREFIX}/receive}"
MQTT_SUBSCRIBE_TOPIC="${MQTT_SUBSCRIBE_TOPIC:-${MQTT_TOPIC_PREFIX}/send}"
MQTT_LOG_TOPIC="${MQTT_LOG_TOPIC:-${MQTT_TOPIC_PREFIX}/log}"
SIGNAL_ACCOUNT="${SIGNAL_ACCOUNT:-$(jq -r '.accounts[0].number' <"${signal_data}/accounts.json")}"

#######################################
# Publish a message via MQTT.
# Globals:
#   MQTT_PUBLISH_OPTIONS
# Arguments:
#   1: MQTT topic
#   2: Message
#######################################
_publish() {
  local topic="${1}" message="${2}"

    # xargs has a default limit of ~30000 bytes for the command line, which may be too small.
    # Thus, the limit is set slightly above the actual size.
    # `LC_ALL` is set to get the string length in bytes, not characters.
    xargs_limit=$(LC_ALL=C expr 50 + "${#topic}" + "${#message}" + "${#MQTT_PUBLISH_OPTIONS}")

    echo "${MQTT_PUBLISH_OPTIONS}" | xargs -s "${xargs_limit}" mosquitto_pub -t "${topic}" -m "${message}"
}

#######################################
# Build a JSON-RPC object to send a message.
# Arguments:
#   1: Message
#   2: Name of a method parameter
#   3: Value of the method parameter
# Outputs:
#   JSON-RPC object
#######################################
_build_json_send() {
  local message="${1}" name="${2}" value="${3}"
  jq --null-input --compact-output --arg name "${name}" --arg value "${value}" --arg message "${message}" \
  '{jsonrpc:"2.0", method:"send", params:{($name):$value, message:$message}}'
}

#
# base64url encoding is required when a base64-encoded string
# (e.g. group-id) is used as part of an mqtt topic.
#

#######################################
# Convert a text from base64 to base64url.
# Arguments:
#   1: Text in base64 encoding
# Outputs:
#   Text in base64url encoding
#######################################
_to_base64url() {
  echo "${1}" | tr '/+' '_-'
}

#######################################
# Convert a text from base64url to base64.
# Arguments:
#   1: Text in base64url encoding
# Outputs:
#   Text in base64 encoding
#######################################
_from_base64url() {
  echo "${1}" | tr '_-' '/+'
}

#######################################
# Write one or more arguments to the log
# Arguments:
#  Log messages
#######################################
log() {
  echo >&2 "${@}"
  if [ "${MQTT_LOG:-false}" = 'true' ]; then
    _publish "${MQTT_LOG_TOPIC}" "${*}"
  fi
}

#######################################
# Read a JSON RPC object from stdin,
# build a message and publish it via MQTT.
# Inputs:
#  A JSON RPC object
#######################################
mqtt_publish() {
  while read -r json_response; do
    if [ "${MQTT_PUBLISH_JSON_RESPONSE:-false}" = 'true' ]; then
      _publish "${MQTT_PUBLISH_TOPIC}" "${json_response}"
    fi

    if [ "${MQTT_PUBLISH_TOPIC_PER_SOURCE_NUMBER:-true}" = 'true' ]; then
      echo "${json_response}" \
      | jq -r '.params.envelope | (.sourceNumber + "," + (.dataMessage | .groupInfo.groupId + "," + .message))' \
      | while IFS=, read -r source_number group_id message; do
        if [ "${message}" ]; then
          topic="${MQTT_PUBLISH_TOPIC}/${source_number#+}${group_id:+/$(_to_base64url "${group_id}")}"
          _publish "${topic}" "${message}"
        fi
      done
    fi
  done
}

#######################################
# Subscribe to a MQTT topic and convert each incoming message
# to a JSON RPC object.
# Outputs:
#   One JSON RPC object per incoming message
#######################################
mqtt_subscribe() {
  echo "${MQTT_SUBSCRIBE_OPTIONS}" \
  | xargs mosquitto_sub -t "${MQTT_SUBSCRIBE_TOPIC}/#" -v \
  | while read -r topic payload; do
    case "${topic}" in
      "${MQTT_SUBSCRIBE_TOPIC}") printf '%s\n' "${payload}" ;;
      "${MQTT_SUBSCRIBE_TOPIC}"/group/*)
        _build_json_send "${payload}" groupId "$(_from_base64url "${topic##*/}")"
        ;;
      "${MQTT_SUBSCRIBE_TOPIC}"/*)
        _build_json_send "${payload}" recipient "+${topic##*/}"
        ;;
      *) log "Ignoring message on unsupported topic ${topic}" ;;
    esac
  done
}


#######################################
# Start the application.
#######################################
main() {
  log "Starting ${0}"
  mqtt_subscribe | signal-cli --account "${SIGNAL_ACCOUNT}" ${DEBUG:+-v}${TRACE:+-v -v} jsonRpc | mqtt_publish
}

main "${@}"
