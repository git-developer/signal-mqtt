#!/bin/sh
#
# A gateway between Signal messages and MQTT
#
set -eu

signal_data="${XDG_DATA_HOME:-${HOME}/.local/share}/signal-cli/data"
MQTT_TOPIC_PREFIX="${MQTT_TOPIC_PREFIX:-signal}"
MQTT_TOPIC_PARAMETERS_FILE="${MQTT_TOPIC_PARAMETERS_FILE:-/etc/signal-mqtt/topic-parameters}"
MQTT_PUBLISH_TOPIC="${MQTT_PUBLISH_TOPIC:-${MQTT_TOPIC_PREFIX}/in}"
MQTT_SUBSCRIBE_TOPIC="${MQTT_SUBSCRIBE_TOPIC:-${MQTT_TOPIC_PREFIX}/out}"
MQTT_LOG_TOPIC="${MQTT_LOG_TOPIC:-${MQTT_TOPIC_PREFIX}/log}"
SIGNAL_ACCOUNT="${SIGNAL_ACCOUNT:-$(jq --raw-output '.accounts[0].number' <"${signal_data}/accounts.json")}"


#######################################
# Publish a message via MQTT.
# Globals:
#   MQTT_PUBLISH_OPTIONS
# Arguments:
#   1: MQTT topic
#   2: Message
#######################################
mqtt_publish() {
  local topic="${1}" message="${2}"

  # xargs has a default limit of ~30000 bytes for the command line,
  # which may be too small.
  # Thus, the limit is set slightly above the actual size.
  # `LC_ALL` is set to get the string length in bytes, not characters.
  xargs_limit=$(LC_ALL=C expr 50 + "${#topic}" + "${#message}" + "${#MQTT_PUBLISH_OPTIONS}")

  printf %s "${MQTT_PUBLISH_OPTIONS}" \
  | xargs -s "${xargs_limit}" mosquitto_pub -t "${topic}" -m "${message}"
}

#######################################
# Write one or more arguments to the log.
# Arguments:
#  Log messages
#######################################
log() {
  printf '%s\n' >&2 "${@}"
  if [ "${MQTT_LOG:-false}" = 'true' ]; then
    mqtt_publish "${MQTT_LOG_TOPIC}" "${*}"
  fi
}

#######################################
# Parse topic parameters.
#
# The source file is expected to contain lines of format
#   `topic_key=json_path`
# with
#  `topic_key`: a string that identifies a parameter in MQTT topics
#  `json_path`: a path in dot-notation to a value in a JSON RPC object
# Whitespaces around key and value and lines starting with `#` are ignored.
#
# Globals:
#   MQTT_TOPIC_PARAMETERS_FILE
#     Source file for parameters.
# Outputs:
#   A regex pattern containing named capturing groups for parameters
#######################################
read_topic_pattern() {
  if [ ! -r "${MQTT_TOPIC_PARAMETERS_FILE}" ]; then
    log "Error: Cannot read topic parameters from '${MQTT_TOPIC_PARAMETERS_FILE}'"
    return 1
  fi
  while IFS='=' read key value; do
    key="$(printf %s "${key}" | xargs)"
    value="$(printf %s "${value}" | xargs)"
    case "${key}" in
      '#'*) ;;
      *) printf '(?<%s>%s)|' "${key}" "$(printf %s "${value}" | sed s/\\./\\\\./g)" ;;
    esac
  done <"${MQTT_TOPIC_PARAMETERS_FILE}" | sed -nE 's/^(.*[^|]+)\|+$/\1/p'
}

#######################################
# Read a JSON RPC object from stdin,
# build a message and publish it via MQTT.
# Inputs:
#  A JSON RPC object
#######################################
publish_jsonrpc() {
  local pattern
  pattern="${MQTT_TOPIC_PARAMETERS_PATTERN:-$(read_topic_pattern "${MQTT_TOPIC_PARAMETERS_FILE}")}"
  while read -r jsonrpc_object; do
    if [ "${LOG_JSONRPC:-false}" = 'true' ]; then
      log "${jsonrpc_object}"
    fi
    if [ "${MQTT_PUBLISH_JSONRPC:-false}" = 'true' ]; then
      mqtt_publish "${MQTT_PUBLISH_TOPIC}" "${jsonrpc_object}"
    fi
    if [ "${MQTT_PUBLISH_TO_PARAMETER_TOPIC:-true}" = 'true' ]; then
      printf %s "${jsonrpc_object}" \
      | jq --raw-output --arg pattern "${pattern}" 'to_topic($pattern)' \
      | while IFS=$(printf '\t') read -r topic message; do
        mqtt_publish "${MQTT_PUBLISH_TOPIC}/${topic}" "${message}"
      done
    fi
  done
}

#######################################
# Subscribe to an MQTT topic and convert
# each incoming message to a JSON RPC object.
# Outputs:
#   One JSON RPC object per incoming message
#######################################
subscribe_for_jsonrpc() {
  printf %s "${MQTT_SUBSCRIBE_OPTIONS}" \
  | xargs mosquitto_sub -t "${MQTT_SUBSCRIBE_TOPIC}/#" -F '%t %x' \
  | while read -r topic hex_message; do
    message="$(echo "${hex_message}" | xxd -p -r)"
    case "${topic}" in
      "${MQTT_SUBSCRIBE_TOPIC}")
        # message is expected to be a JSON RPC message
        printf '%s\n' "${message}"
        ;;
      "${MQTT_SUBSCRIBE_TOPIC}"/*)
        printf '%s\n' "${topic##${MQTT_SUBSCRIBE_TOPIC}/}" \
        | jq --raw-input --compact-output --arg message "${message}" 'to_jsonrpc($message)'
        ;;
      *) log "Ignoring message on unsupported topic ${topic}" ;;
    esac | if [ "${LOG_JSONRPC:-false}" = 'true' ]; then
      { log "$(tee /dev/fd/3)"; } 3>&1
    else
      cat -
    fi
  done
}

#######################################
# Start signal-cli.
# Globals:
#   SIGNAL_CLI_OPTIONS
#   SIGNAL_ACCOUNT
# Outputs:
#   JSON RPC messages
#######################################
signal_cli() {
  3<&0 xargs sh -c '<&3 exec signal-cli "${@}"' inline-script <<EOF
    ${SIGNAL_CLI_OPTIONS-} --account "${SIGNAL_ACCOUNT}" jsonRpc
EOF
}

#######################################
# Start the application.
#######################################
main() {
  log "$(basename "${0}") - Start"
  subscribe_for_jsonrpc | signal_cli | publish_jsonrpc
}

main "${@}"
